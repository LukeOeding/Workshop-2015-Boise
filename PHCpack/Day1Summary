
restart
R = QQ[a11,a12,a13,a14,a21,a22,a23,a24,a31,a32,a33,a34,a41,a42,a43,a44,y][x]--define the ring


--Takes characteristicPoly of a Matrix (not a Mutable Matrix)
characteristicPoly = (M) -> (
    n:= numgens source M;
    id1 := mutableIdentity(R, n);
    Id := matrix(id1);
    chM := det (x*Id-M);
    return(chM);
    )


--pulls coefficients of x^i. But does not want
--the elements 0,1,-1 appearing
pullCoefficients = (f) -> (
    CoeffList:= new MutableList from {};
     k:=0;
     t:=0;
    while k<=degree(x,f) do
       (
	   C = coefficient(x^k,f);
	   if C == 0 or C==1 or C==-1
	       then C==0 
	   else
	       (
		   CoeffList#t = C;
		   t=t+1;
		) ;       
	   k=k+1;
       );
   return(CoeffList);
    )


--Takes in a matrix, and two lists.
--A corresponds to a weighted adjacency matrix having to do 
--with the compartment model
--I and J are indexing sets corresponding to inputs and outputs
--in the model. These lists begin at 0. Not 1.
getCoefficients = (A,I,J) -> (
    chA := characteristicPoly(A);
    allCoeff := new MutableList from {};
    allCoeff=pullCoefficients(chA);
    jindex:=0;
    iindex:=0;
    
--    flatten flatten
--    for i in I list(
--    	for j in J list(
--    	    if i==j then (chAjj := characteristicPoly(submatrix'(A,{j},{j})); pullCoefficients(chAjj));)
--	    else if j!=i then (AnewMM:=mutableMatrix(A);AnewMM_(i,j)=y; Anew:= matrix(AnewMM); chA
--    )
     while jindex<#J do
    	(
	    j=J#jindex;
	    iindex=0;
	    while iindex<#I do
	    	(
		  i=I#iindex;
		  if j==i
		      then (chAjj := characteristicPoly(submatrix'(A,{j},{j})); allCoeff = join(allCoeff,pullCoefficients(chAjj));)
		  else if j!=i then
		      (
		      AnewMM :=mutableMatrix(A);
		      AnewMM_(i,j)=y;
		      Anew := matrix(AnewMM);
		      chAnew := characteristicPoly(Anew);
		      allCoeff = join(allCoeff,pullCoefficients(diff(y,chAnew)));
		      );    
		  iindex=iindex+1;    
		);
	    jindex=jindex+1;	    
	);
    return(allCoeff);
    )




--------------------------CODE FOR FINDING MAXIMALLY ALG IND SUBSET --------------------------
--loadPackage "EliminationMatrices"

--maxAlgInd = (M) -> (
-- JM:=jacobian(M);
-- mCol:=maxCol(JM);
-- Indices:=mCol#1;
-- linIndlist:=for i in Indices list M_(0,i); 
-- return(linIndlist);   
--)



--MMM=matrix{{x+y^3,x^3+y,x^2}}
--LL=maxAlgInd(MMM)
--jacobian(MMM)

----------------------------------------------------------------------------------------------



-------------
--Example 1--
-------------

G1=matrix{{a11,a12,a13},{a21,a22,0},{0,a32,-a13}}

TestI = new MutableList from {};
TestJ = new MutableList from {};

TestI = {0};
TestJ = {0,1};
peek getCoefficients(G1,TestI,TestJ)



--------------
--Example 2---
--------------

G2 = matrix{{a11,a12,0,0},{a21,-(a12-a32),a23,0},{0,a32,a33,a34},{0,0,a43,a44}}

TestI = {0,2};
TestJ = {0,3};
peek getCoefficients(G2,TestI,TestJ)    

peek pullCoefficients(characteristicPoly(G2))


G2star = mutableMatrix(G2)
G2star_(2,0)=y
characteristicPoly(matrix G2star)
peek pullCoefficients(diff(y,characteristicPoly(matrix G2star)))


---------------------------------------------------------------------------




---------
--Zvi's Code--
----------

--bases = (R, I) -> (
     --Take an ideal I in ring R.
     --Return the list of bases in the matroid.
     
--     E = set gens R;
--     mRank = dim I;
--     potentialBases = subsets(E,mRank);
--     baseList = toList set apply(potentialBases, base -> 
--	  (if (codim eliminate(toList (E-base),I) == 0) then toList base)) - set{null};
--     numBases = length baseList;
--     B = baseList
--     )
 
