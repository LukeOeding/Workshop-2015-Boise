

--  some code here is simpler versions of filtered complex code



FilteredVectorSpace = new Type of HashTable

filteredVectorSpace = method()

filteredVectorSpace(List) := HashTable => (L) -> (
    maps = L;
       V = target maps#0;-- By default the ambient vspace is target of first map.           
 P := {0 => V} | apply (#maps,  p -> p+1 => image maps#p);
  new FilteredVectorSpace from reverse(P)
   )



FilteredVectorSpace^ ZZ := Module => (V,j) -> (
    Keys := keys V;
   Max := max Keys;
   Min := min Keys;
   if j >= Min and j <= Max  then return V#j else (
       if j < Min then (return V#Min) else( return 0)
       );
    )


--
--
-- scratch test



k=QQ
V=k^4
f0=id_V
V0=image f0
f1=map(V,V,matrix(k,{{0,0,0,0},{0,1,0,0},{0,0,1,0},{0,0,0,0}}))
V1=image f1

L={f0,f1}


apply(#L,i->i)

V = filteredVectorSpace({f0,f1})
l = keys V

V^2

V^3

V^4

V^1

V^(-1)

V^(-2)

V^0


keys V
